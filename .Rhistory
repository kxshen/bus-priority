head(triptimes)
summary(triptimes)
?n
triptimes = dat %>%
group_by(trip) %>%
summarise(n = max(actstoptime) - min(actstoptime))
triptimes
mean(triptimes)
triptimes = dat %>%
group_by(trip) %>%
summarise(travel_time = max(actstoptime) - min(actstoptime))
triptimes
head(dat)
m
stops_cut
stops_cut$stop_name
mean(triptimes$travel_time
)
triptimes = dat %>%
group_by(trip) %>%
summarise(travel_time = actstoptime[stopid == 2709] - actstoptime[stopid == 5303])
triptimes = dat %>%
group_by(trip) %>%
summarise(travel_time = count(actstoptime))
triptimes = dat %>%
group_by(trip) %>%
summarise(travel_time = n(actstoptime))
triptimes = dat %>%
group_by(trip) %>%
summarise(travel_time = n())
triptimes
class(dat$stopid)
triptimes = dat %>%
group_by(trip) %>%
filter(c(2709, 5303) %in% stopid)
c(2709, 5303) %in% stopid
c(2709, 5303) %in% dat$stopid
triptimes = dat %>%
group_by(trip) %>%
filter(stopid %in% 2709)
triptimes
triptimes = dat %>%
group_by(trip) %>%
filter(stopid %in% 2709)
summarise(travel_time = n())
triptimes
triptimes = dat %>%
group_by(trip) %>%
filter(stopid %in% 2709) %>%
summarise(travel_time = n())
triptimes
unique(triptimes)
unique(triptimes$travel_time)
filter(match(stopid, 2709) %>%
triptimes = dat %>%
filter(match(stopid == 2709) %>%
c
)
triptimes = dat %>%
group_by(trip) %>%
filter(match(stopid == 2709)) %>%
summarise(travel_time = n())
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid%in% 2709) & any(stopid %in% 5303))# %>%
triptimes
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>%
summarise(travel_time = max(actstoptime) - min(actstoptime))
triptimes
mean(travel_time)
mean(triptimes$travel_time)
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime)
seasonal_period, implemented) #calculate stoptime using the first and last stops
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),
seasonal_period, implemented) #calculate stoptime using the first and last stops
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),
unique(seasonal_period), unique(implemented)) #calculate stoptime using the first and last stops
triptimes
triptimes$`unique(seasonal_period)`
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),
seasonal_period = unique(seasonal_period),
implemented = unique(implemented)) #calculate stoptime using the first and last stops
triptimes %>%
group_by(seasonal_period) %>%
summarise(mean = mean(travel_time),
sd = sd(travel_time))
runif(10)
?runif
triptimes %>%
group_by(seasonal_period) %>%
summarise(mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
triptimes %>%
group_by(seasonal_period) %>%
summarise(mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
triptimes
nrow(mbta_gtfs)
mbta_gtfs
dat
dat[dat$stopid = dat$stopid[1],]
dat[dat$stopid == dat$stopid[1],]
dat[dat$trip == dat$trip[1],]
dat[dat$trip == dat$trip[99],]
format(dat$actstoptime, "%H%:%M:%S")
triptimes %>%
mutate(time = format("%H%:%M:%S"))
triptimes %>%
mutate(time = format(actstoptime,"%H%:%M:%S"))
triptimes %>%
mutate(time = format(., actstoptime,"%H%:%M:%S"))
triptimes %>%
mutate(time = with(., format(actstoptime,"%H%:%M:%S")))
triptimes
triptimes %>%
mutate(time = with(., format(actstoptime,"%H%:%M:%S")))
dat %>%
mutate(time = with(., format(actstoptime,"%H%:%M:%S")))
as.POSIXct()
as.POSIXct('07:00:00')
dat = dat %>%
mutate(time = with(., format(actstoptime,"%H%:%M:%S")))
head(dat)
max(dat$actstoptime)
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
"07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00",
byrow = TRUE
) %>%
as.POSIXct(format = "%H%:%M:%S")
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
"07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00",
ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(format = "%H%:%M:%S")
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
"07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00",
nrow = 3, ncol = 2
byrow = TRUE
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
"07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00",
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(format = "%H%:%M:%S")
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(format = "%H%:%M:%S")
timeclasses
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
)
timeclasses
as.POSIXct(timeclasses, format = "%H%:%M:%S")
as.POSIXct(strptime(timeclasses), format = "%H%:%M:%S")
as.POSIXct(strptime(timeclasses, format = "%H%:%M:%S"))
dat$time
class(dat$time)
strptime(dat$time)
strptime(dat$time, format = "%H:%M:%S")
clasS(strptime(dat$time, format = "%H:%M:%S"))
class(strptime(dat$time, format = "%H:%M:%S"))
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
strptime(format = "%H:%M:%S")
timeclasses
dat %>%
mutate(time = with(., strptime(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")))
class(format(dat$actstoptime,"%H%:%M:%S")
)
strptime(format(dat$actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")
dat %>%
mutate(time = strptime(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S"))
dat$time
dat = read.csv(file = 'data/Broadway/R101_in.csv')
#Convert to datetime object
dat$actstoptime = dat$actstoptime %>%
as.POSIXct()
at %>%
mutate(time = strptime(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S"))
dat %>%
mutate(time = strptime(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S"))
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(strptime(format = "%H:%M:%S")) # creates POSIX object with today's date (just make sure it runs on the same day as the other)
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(strptime(.,format = "%H:%M:%S")) # creates POSIX object with today's date (just make sure it runs on the same day as the other)
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
strptime(format = "%H:%M:%S") # creates POSIX object with today's date (just make sure it runs on the same day as the other)
timeclasses
class(timeclasses)
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(format = "%H:%M:%S") # creates POSIX object with today's date (just make sure it runs on the same day as the other)
timeclasses
dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S"))
dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")) %>% #first, extract time out of the datetime
mutate(peak = with(.,case_when( #case_when() is better than nested ifelse statements
(time > timeclasses[1,1] & time < timeclasses[1,2]) ~ 1,
(time > timeclasses[2,1] & time < timeclasses[2,2]) ~ 1,
(time > timeclasses[3,1] & time < timeclasses[3,2]) ~ 1,
ELSE ~ 0)))
timeclasses[1,1]
timeclasses[1
]
timeclasses[1,1]
timeclasses[[1,1]]
timeclasses[2
]
timeclasses[3]
timeclasses[4]
dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")) %>% #first, extract time out of the datetime
mutate(peak = with(.,case_when( #case_when() is better than nested ifelse statements
(time > timeclasses[1] & time < timeclasses[4]) ~ 1,
(time > timeclasses[2] & time < timeclasses[5]) ~ 2,
(time > timeclasses[3] & time < timeclasses[6]) ~ 3,
ELSE ~ 0)))
timeclasses[[1]]
timeclasses[[2]]
timeclasses[[5]]
timeclasses[[1,1]]
timeclasses[[1]][[2]]]
timeclasses[[1]][[2]]
attributes(timeclasses)
dat = dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")) %>% #first, extract time out of the datetime
mutate(peak = with(.,case_when( #case_when() is better than nested ifelse statements
(time > timeclasses[1] & time < timeclasses[4]) ~ 1,
(time > timeclasses[2] & time < timeclasses[5]) ~ 2,
(time > timeclasses[3] & time < timeclasses[6]) ~ 3,
TRUE ~ 0)))
dat
hist(dat$peak)
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes = dat %>%
group_by(peak) %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes
triptimes = dat %>%
group_by(peak) %>%
#group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes = dat %>%
group_by(peak) %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented),
peak = unique(peak))
dat = dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")) %>% #first, extract time out of the datetime
mutate(peak = with(.,case_when( #case_when() is better than nested ifelse statements
(time > timeclasses[1] & time < timeclasses[4]) ~ 1,
(time > timeclasses[2] & time < timeclasses[5]) ~ 2,
(time > timeclasses[3] & time < timeclasses[6]) ~ 3,
TRUE ~ 0))) #all other trips are not analyzed
library(tidyverse)
#Libraries...?
library(tidytransit)
library(tidyverse)
library(leaflet)
library(lubridate)
#GTFS
mbta_gtfs = read_gtfs('data/MBTA_GTFS_Jan_2019.zip')#runtime is long on importing GTFS feed
dat = read.csv(file = 'data/Broadway/R101_in.csv')
#Find coordinates of important stops
stopnames = dat %>% select(stopid) %>% unique()
stops_cut = filter(mbta_gtfs$stops, as.numeric(stop_code) %in% stopnames$stopid)
#map out the stops
m = leaflet(stops_cut) %>%
addTiles() %>%
addMarkers(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
#Convert to datetime object
dat$actstoptime = dat$actstoptime %>%
as.POSIXct()
#Classify into AM peak (1), midday (2), and PM peak (3)
timeclasses = matrix(
c("07:30:00", "09:30:00",
"12:00:00", "14:00:00", #gtfs uses 24 hr clock
"16:30:00", "18:30:00"),
nrow = 3, ncol = 2,
byrow = TRUE
) %>%
as.POSIXct(format = "%H:%M:%S") # creates POSIX object with today's date (just make sure it runs on the same day as the other)
dat = dat %>%
mutate(time = as.POSIXct(format(actstoptime,"%H%:%M:%S"), format = "%H:%M:%S")) %>% #first, extract time out of the datetime
mutate(peak = with(.,case_when( #case_when() is better than nested ifelse statements
(time > timeclasses[1] & time < timeclasses[4]) ~ 1,
(time > timeclasses[2] & time < timeclasses[5]) ~ 2,
(time > timeclasses[3] & time < timeclasses[6]) ~ 3,
TRUE ~ 0))) #all other trips are not analyzed
triptimes = dat %>%
group_by(trip) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes %>%
group_by(seasonal_period) %>%
summarise(mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
dat
head(dat)
hist(dat$peak)
triptimes = dat %>%
group_by(trip, peak) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes
triptimes %>%
group_by(seasonal_period) %>%
summarise(mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
triptimes %>%
#group_by(seasonal_period) %>%
summarise(mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
triptimes %>%
mean(travel_time)
mean(triptimes$travel_time)
sd(triptimes$travel_time)
triptimes = dat %>%
group_by(trip, peak, seasonal_period) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
triptimes
triptimes = dat %>%
group_by(trip, peak) %>%
filter(any(stopid %in% 2709) & any(stopid %in% 5303)) %>% # look at length of interest: the full corridor
summarise(travel_time = max(actstoptime) - min(actstoptime),#calculate stoptime using the first and last stops
seasonal_period = unique(seasonal_period),
implemented = unique(implemented))
head(triptimes)
triptimes %>%
group_by(seasonal_period) %>%
summarise(
mean_imp = mean(travel_time[implemented == 1]),
sd_imp = sd(travel_time[implemented == 1]),
mean_noimp = mean(travel_time[implemented == 0]),
sd_noimp = sd(travel_time[implemented == 0])
)
dat
range(dat$tripdate)
class(dat$tripdate)
range(as.POSIXct(dat$tripdate))
#map out the stops
m = leaflet(stops_cut) %>%
addTiles() %>%
addMarkers(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
m
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
m
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
m
addCircleMarkers(lng = ~stop_lon, lat = ~stop_lat,
radius = ~ifelse(type == 1, 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  #trip goes sotuhbound, remember that
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  %>% #trip goes sotuhbound, remember that
addCircleMarkers(lng = ~stop_lon, lat = ~stop_lat,
radius = ~ifelse(type == 1, 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  %>% #trip goes sotuhbound, remember that
addCircleMarkers(lng = ~stop_lon, lat = ~stop_lat,
radius = ~ifelse(type == "ship", 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  %>% #trip goes sotuhbound, remember that
addCircleMarkers(lng = ~stop_lon, lat = ~stop_lat,
radius = 6,
color = ~pal(1),
stroke = FALSE, fillOpacity = 0.5
)
#map out the stops
m = leaflet(stops_cut) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolylines(lng = ~stop_lon, lat = ~stop_lat)  %>% #trip goes sotuhbound, remember that
addCircleMarkers(lng = ~stop_lon, lat = ~stop_lat,
radius = 6,
color = "red",
stroke = FALSE, fillOpacity = 0.5
)
m
